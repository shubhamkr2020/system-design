similar to metric collection system
source: 
  https://medium.com/@ajingnv/system-design-a-server-health-monitoring-system-9bdd0066bb9c
youtube:
  1. jordan has no life: https://www.youtube.com/watch?v=_KoiMoZZ3C8
  2. SDFC: metric collection - https://github.com/systemdesignfightclub/SDFC/blob/main/system-design/metrics-service/README.md
      video - https://www.youtube.com/watch?v=f-H4nuYoSOM
  3. 

Notes:

1. Time series dataset should be used, it helps in analysis as well, 
      Goku - time series db: https://www.youtube.com/watch?v=tZPTpa3JcKA&list=PLsdq-3Z1EPT27BuTnJ_trF7BsaTpYLqst&index=43
      1. It stores the value in the form of key value pairs with some tags to filter the data, like OpenTSB
      2. It has aggregators like count, sum, max, min average, etc operations to do quick aggragated operations, should be stored column wise.
      3. Use in memory storage to make the db fast instead of using a disk (store historical data in disks but recent data in memory hash maps).
      4. Do scatter gather on the local machines (shards) and then send the response to a proxy which does the final aggregation.
2. Time series databases - Amazon timestream, prometheus, etc.
3. Talk about push and pull mechanisms whenever possible and select the better one with reasons.

4. Use batch processing when there are a lot of API/RPC calls on the servers.
  Collect the data and call the server only once (if possible) with the batch of the data as input.

5. When there is a lot of data to be processed at once, use stream data processing and message queue in between.
  Use a queue to store the stream of data as input and then use streaming to process the queue data efficiently.

Final Design:

https://miro.medium.com/v2/resize:fit:4800/format:webp/1*RY1jt3akoLUvlCS4i7t-8g.png


Approaches:

1. centralised service for health check
2. 

