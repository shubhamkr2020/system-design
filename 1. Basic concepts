Sources: 
1. byte byte go - https://www.youtube.com/watch?v=lX4CrbXMsNQ&list=PLCRMIe5FDPsd0gVs500xeOewfySTsmEjf&index=1
2. system design primer - https://github.com/donnemartin/system-design-primer/blob/master/README.md

1. CAP Theorem:
  Consistency, Availability and Parition Tolerance - 
  If partition in the network happend either consistency or availability can be maintained

2. Load Balancer Alogirthms:
  a. Static - need not check/ping the servers
    Round Robin
    Sticky Round Robin
    Weighted Round Robin
    Hash
  b. Dynamic - need to ping the servers
    Least Connections
    Least Time

3. API Gateway:
  a. between clients and servers
  b. authentication and security <=> Identity Provider
  c. load balancing and service discovery
  d. rate limiting
  e. monitoring and logging and analytics
  f. caching

4. Proxy, reverse proxy, load balancer, api gateway: - used for managing traffic efficiently
  proxy - between clients and internet, can also be called as client proxy servers.
  reverse proxy - between servers and internet, can also be called as server proxy servers.
  load balancer - to redirect the load to healthy servers to serve the requests, could be dynamic or static algo and addition of the servers.
  api gateway - single point of entry for functionalities mentioned in point 3.
 
5. ways to improve the API performance:
  a. Caching - do not reach out to databases all the time, cache frequently used data if possible.
  b. Connection Pool - create only one connection and serve any request before it is closed
  c. avoid n+1 problem - query database only once for n request ids
  d. pagination - if response is too large paginate it
  e. json serializers - use fast serialization libraries
  f. payload compression - compress the requests and response if possible
  g. asychronous logging - in high throuhgput systems either avoid loggings for sometime in between or write the logs asynchronously. 

6. 6 API architecture designs:
  a. SOAP - XML based, used in financial/payment systems where security/reliability is requires, complex in general
  b. REST - restful state trasnfer, widely used in internet (backbone), like youtube, google, netflix, etc
  c. GraphQL - ask for exactly what you need, flexibilty and steep learning curve
  d. gRPC - favorite for microservices
  e. WebSocket - bi direcitonal realtime low latency, for chats, video chats, gaming, etc
  f. WebHook - event driven, slack, discord, stripe payments platform, etc, also sends a webhook event in the request like callback.

7. 7 Distributed systems patterns:
  a. Ambassador - create an assistance if needed
  b. Circuit breaker - in case of failures, break the circuit and fix it before proceeding further, netflix hystics
  c. command and query separation - separate the write and read databases and handle/scale it separately - mostly used in read heavy systems
  d. Event sourcing - github events, less knowledge
  e. leader election - to handle a write on db and read from multple dbs in general.
  f. pubsub - used to decouple the systems with heavy requests
  g. sharding - partition the db if possible

8. short polling, long polling, webhooks, websockets - 
  short - ping periodically and ask for the updates, high server utilization.
  long - ping once and when the update is ready response back, connection opened for a long time.
  webhooks - give the way to revert back the update info when it is done, usually secured, and backed with polling
  websockets - constant bidireectional connection for real time bidirectional updates.

9. CDNs:
  a. pull cdn - cdns request when client request for a new content, for heavy traffics.
  b. push cdn - servers pushes the updated changes when happens, for smaller traffics.

10. Cache write mechanisms, when to update?
  a. cache aside - read -> cache miss -> read from db -> update cache -> return from cache.
  b. write through - read and write to cache and cache will sync from the db synchronously.
  c. write behind or write back - read and write to cache and cache will sync to db asynchronoudly using queu if possible.
  d. refresh ahead - refresh the cache periodically, can also predict the data according to time.

11. Communication Protocols:
  a. http - request and response encoding protocol for transporting the data between client and server, 
    application layer protocol, balancing, caching, encryption, compression, etc.
  b. TCP - transport layer protocol, connection oriented with handshakes.
  c. UDP - ttransport layer protocol, connection less protocol, out of order datagram trasfer.
  d. RPC - request response protocol.
  e. REST - representational state transfer mechanism for communication between client and servers.

12. Powers of two table:
  value        2 power        10 power        bytes
  thousand      10            3                1 KB
  million       20            6                1 MB
  billion       30            9                1 GB
  trillion      40            12               1 TB
  quadrillion   50            15               1 PB


13. Consistent hashing:
  1. hash ring
  2. add, remove servers.
  3. virtual nodes for huge range between two servers problem
